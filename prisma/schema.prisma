// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String   @id @default(cuid())
  name            String?
  email           String?  @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  jobsPosted      Job[]    @relation("UserJobsPosted")
  applications    Application[]
}

model Job {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  location    String?
  company     String
  type        String
  salary      String?

  postedAt   DateTime @default(now())
  postedBy   User     @relation("UserJobsPosted", fields: [postedById], references: [id], onDelete: Cascade)
  postedById String
  applications Application[]
}

model Application {
  id          String   @id @default(cuid())
  jobId       String
  userId      String
  coverLetter String?  @db.Text
  resume      String?  @db.Text
  status      String   @default("pending") // pending, accepted, rejected
  appliedAt   DateTime @default(now())

  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([jobId, userId])
}